// src/api/category/content-types/category/lifecycles.ts
'use strict';
declare const strapi: any;

interface Category {
  id: number;
  isVerified: boolean;
}

/**
 * –î–æ–¥–∞—î —É CategoryVectorEntry –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
 * —ñ–≥–Ω–æ—Ä—É—é—á–∏ ¬´–±–∏—Ç—ñ¬ª –ø–æ–¥—ñ—ó –∑ —ñ–Ω—à–∏—Ö –º–æ–¥–µ–ª–µ–π.
 */
async function populateCategoryVectorEntries(categoryId: number): Promise<void> {
  strapi.log.info(`üõ†Ô∏è [populate] Start for categoryId=${categoryId}`);

  // 1) –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∂–∏–≤—ñ (published) –ø–∏—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ entityService
  const questions: { id: number }[] = await strapi.entityService.findMany(
    'api::question.question',
    {
      fields: ['id'],
      publicationState: 'live',
      sort: { order: 'asc' },
    }
  );
  const qids = questions.map((q) => q.id).join(', ');
  strapi.log.info(`üõ†Ô∏è [populate] question IDs: [${qids}]`);

  // 2) –°—Ç–≤–æ—Ä—é—î–º–æ –ª–∏—à–µ —Ç—ñ –ø–∞—Ä–∏ (category, question), —è–∫–∏—Ö —â–µ –Ω–µ–º–∞
  let createdCount = 0;
  for (const { id: questionId } of questions) {
    const exists = await strapi.db
      .query('api::category-vector-entry.category-vector-entry')
      .findOne({ where: { category: categoryId, question: questionId } });
    if (exists) {
      strapi.log.debug(`‚è≠Ô∏è Skip existing: category=${categoryId}, question=${questionId}`);
      continue;
    }

    strapi.log.info(`‚ûï Creating CVE for category=${categoryId}, question=${questionId}`);
    try {
      const created = await strapi.entityService.create(
        'api::category-vector-entry.category-vector-entry',
        {
          data: {
            category: { connect: { id: categoryId } },
            question: { connect: { id: questionId } },
            value: 3,
          },
          populate: ['category', 'question'],
        }
      );
      createdCount++;
      strapi.log.info(
        `‚úÖ Created entryId=${created.id} ‚Üí category=${created.category?.id}, question=${created.question?.id}`
      );
    } catch (err) {
      strapi.log.error(`‚ùå Error creating CVE for questionId=${questionId}`, err);
    }
  }

  strapi.log.info(
    `üõ†Ô∏è [populate] Finished for categoryId=${categoryId}, created=${createdCount}`
  );
}

export default {
  // –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è Category (–Ω–µ —ñ–Ω—à—ñ –º–æ–¥–µ–ª—ñ!)
  async afterCreate(event: any) {
    // –ó–∞—Ö–∏—Å—Ç–∏–º–æ—Å—è –≤—ñ–¥ ¬´–ª–µ–≤–∏—Ö¬ª –ø–æ–¥—ñ–π
    if (event.model?.uid !== 'api::category.category') return;

    const { id, isVerified }: Category = event.result;
    strapi.log.info(`üîî [afterCreate] Category id=${id}, isVerified=${isVerified}`);
    if (isVerified) {
      await populateCategoryVectorEntries(id);
    }
  },

  // –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è Category (–Ω–µ —ñ–Ω—à—ñ –º–æ–¥–µ–ª—ñ!)
  async afterUpdate(event: any) {
    if (event.model?.uid !== 'api::category.category') return;

    const { id, isVerified }: Category = event.result;
    const was = event.params.data.isVerified;
    strapi.log.info(
      `üîî [afterUpdate] Category id=${id}, wasVerified=${was}, nowVerified=${isVerified}`
    );
    if (was === true && isVerified) {
      await populateCategoryVectorEntries(id);
    }
  },
};
