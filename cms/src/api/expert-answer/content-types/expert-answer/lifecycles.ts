// src/api/expert-answer/content-types/expert-answer/lifecycles.ts
'use strict';
declare const strapi: any;

export default {
  // –ü—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  async afterCreate(event: { result: any }) {
    const created = event.result as any;
    if (!created.isConfirmed) return;

    // –î–æ–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π –∑–∞–ø–∏—Å –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    const full = await strapi.entityService.findOne(
      'api::expert-answer.expert-answer',
      created.id,
      { populate: ['category'] }
    );
    const categoryId = (full as any).category?.id;
    if (!categoryId) {
      strapi.log.warn(`[EA.afterCreate] –í—ñ–¥—Å—É—Ç–Ω—ñ–π categoryId –¥–ª—è id=${created.id}`);
      return;
    }

    strapi.log.info(`üß™ [EA.afterCreate] confirmed answer id=${created.id}, categoryId=${categoryId}`);
    await recalcCVE(categoryId);
  },

  // –ü—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —ñ—Å–Ω—É—é—á–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  async afterUpdate(event: { result: any; params: { data: any } }) {
    if (event.params.data.isConfirmed !== true) return;

    // –î–æ–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π –∑–∞–ø–∏—Å –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    const full = await strapi.entityService.findOne(
      'api::expert-answer.expert-answer',
      event.result.id,
      { populate: ['category'] }
    );
    const categoryId = (full as any).category?.id;
    if (!categoryId) {
      strapi.log.warn(`[EA.afterUpdate] –í—ñ–¥—Å—É—Ç–Ω—ñ–π categoryId –¥–ª—è id=${event.result.id}`);
      return;
    }

    strapi.log.info(`üß™ [EA.afterUpdate] confirmed answer id=${full.id}, categoryId=${categoryId}`);
    await recalcCVE(categoryId);
  },
};

/**
 * –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ ExpertAnswer ‚Üí CVE –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 */
async function recalcCVE(categoryId: number) {
  strapi.log.info(`üîÑ [recalcCVE] START categoryId=${categoryId}`);

  // 1) –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ª–∏—à–µ –ø–æ–ª–µ answers)
  const answers = await strapi.entityService.findMany(
    'api::expert-answer.expert-answer',
    {
      filters: { category: { id: categoryId }, isConfirmed: true },
      fields: ['answers'],            // —Ç—É—Ç –±—É–ª–æ 'answer'
    }
  ) as Array<{ answers: number[] }>;   // —Ç—É—Ç –±—É–ª–æ { answer: number[] }

  if (answers.length === 0) {
    strapi.log.info(`üîÑ [recalcCVE] –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ ‚Äî –Ω–µ–º–∞—î confirmed answers`);
    return;
  }

  // 2) –†–∞—Ö—É—î–º–æ –ø–æ–µ–ª–µ–º–µ–Ω—Ç–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ
  const arrays = answers.map(a => a.answers);  // –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–ª—è answers
  const maxLen = Math.max(...arrays.map(a => a.length));
  const sums = Array(maxLen).fill(0);
  const counts = Array(maxLen).fill(0);
  arrays.forEach(arr => {
    arr.forEach((v, i) => {
      sums[i] += v;
      counts[i] += 1;
    });
  });
  const means = sums.map((s, i) => counts[i] > 0 ? s / counts[i] : 0);

  // 3) –î–æ–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ CVE –∑ question.order
  const rawCves = await strapi.entityService.findMany(
    'api::category-vector-entry.category-vector-entry',
    {
      filters: { category: { id: categoryId } },
      populate: { question: { fields: ['order'] } },
    }
  ) as Array<{ id: number; question: { order: number } }>;

  // 4) –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–µ–Ω CVE.value
  for (const { id, question } of rawCves) {
    const ord = question.order;
    const newVal = means[ord - 1] ?? 0;
    await strapi.entityService.update(
      'api::category-vector-entry.category-vector-entry',
      id,
      { data: { value: newVal } }
    );
    strapi.log.info(`‚úÖ [recalcCVE] CVE id=${id}, order=${ord} ‚Üí value=${newVal}`);
  }

  strapi.log.info(`üîÑ [recalcCVE] END categoryId=${categoryId}`);
}
